from django.shortcuts import render, redirect
from django.contrib import messages
from django.db import transaction
from django.contrib.auth import authenticate, login, logout
from django.contrib.auth.decorators import login_required, user_passes_test
from django.db.models import Q
from shop.forms import RegisterForm, LoginForm, ProductForm, GuestCheckoutForm
from shop.models import Product, Cart, CartItem, Order, OrderItem, Payment


# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå admin
def admin_check(user):
    return user.is_authenticated and user.is_staff

@user_passes_test(admin_check, login_url='shop:login')
def admin_product_list(request):
    products = Product.objects.all().order_by('id')
    return render(request, 'admin_product_list.html', {'products': products})

@user_passes_test(admin_check, login_url='shop:login')
def admin_product_add(request):
    if request.method == 'POST':
        form = ProductForm(request.POST)
        if form.is_valid():
            form.save()
            messages.success(request, "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!")
            return redirect('shop:admin_product_list')
        else:
            messages.error(request, "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô")
    else:
        form = ProductForm()
    return render(request, 'admin_product_form.html', {'form': form, 'title': '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤'})

@user_passes_test(admin_check, login_url='shop:login')
def admin_product_edit(request, pk):
    try:
        product = Product.objects.get(pk=pk)
    except Product.DoesNotExist:
        messages.error(request, "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ô‡∏µ‡πâ")
        return redirect('shop:admin_product_list')

    if request.method == 'POST':
        form = ProductForm(request.POST, instance=product)
        if form.is_valid():
            form.save()
            messages.success(request, "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!")
            return redirect('shop:admin_product_list')
    else:
        form = ProductForm(instance=product)
    return render(request, 'admin_product_form.html', {'form': form, 'title': '‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤'})

@user_passes_test(admin_check, login_url='shop:login')
def admin_product_delete(request, pk):
    try:
        product = Product.objects.get(pk=pk)
    except Product.DoesNotExist:
        messages.error(request, "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ô‡∏µ‡πâ")
        return redirect('shop:admin_product_list')

    if request.method == 'POST':
        product.delete()
        messages.info(request, "‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
        return redirect('shop:admin_product_list')

    return render(request, 'admin_product_delete.html', {'product': product})



# ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
def register_view(request):
    if request.method == 'POST':
        form = RegisterForm(request.POST)
        if form.is_valid():
            user = form.save(commit=False)
            user.set_password(form.cleaned_data['password'])
            user.save()
            messages.success(request, "‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß! ‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö")
            return redirect('shop:login')
        else:
            messages.error(request, "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å")
    else:
        form = RegisterForm()
    return render(request, 'register.html', {'form': form})

# ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö
def login_view(request):
    if request.method == 'POST':
        form = LoginForm(request, data=request.POST)
        if form.is_valid():
            username = form.cleaned_data.get('username')
            password = form.cleaned_data.get('password')
            user = authenticate(username=username, password=password)
            if user is not None:
                login(request, user)
                messages.success(request, f"‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö {username}!")
                return redirect('shop:product_list')
            else:
                messages.error(request, "‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
        else:
            messages.error(request, "‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
    else:
        form = LoginForm()
    return render(request, 'login.html', {'form': form})

# ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö
def logout_view(request):
    logout(request)
    messages.info(request, "‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
    return redirect('shop:product_list')

# ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
def product_list(request):
    """‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î + ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ + ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö + ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤"""
    products = Product.objects.all().order_by('-id')

    # üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
    query = request.GET.get('q')
    if query:
        products = products.filter(Q(name__icontains=query) | Q(description__icontains=query))

    # üîΩ ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
    sort = request.GET.get('sort')
    if sort == 'price_low':
        products = products.order_by('price')
    elif sort == 'price_high':
        products = products.order_by('-price')
    elif sort == 'newest':
        products = products.order_by('-id')
    elif sort == 'oldest':
        products = products.order_by('id')

    # üõí ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏•‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
    if request.method == 'POST':
        product_id = request.POST.get('product_id')
        if request.user.is_authenticated:
            product = Product.objects.get(id=product_id)
            cart_item, created = CartItem.objects.get_or_create(
                user=request.user,
                product=product,
                defaults={'quantity': 1}
            )
            if not created:
                cart_item.quantity += 1
                cart_item.save()
            messages.success(request, f"‡πÄ‡∏û‡∏¥‡πà‡∏° {product.name} ‡∏•‡∏á‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß!")
        else:
            messages.error(request, "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏•‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤")
            return redirect('shop:login')
        return redirect('shop:product_list')

    return render(request, 'product_list.html', {'products': products})

# ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
def product_detail(request, pk):
    try:
        product = Product.objects.get(id=pk)
    except Product.DoesNotExist:
        messages.error(request, "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ô‡∏µ‡πâ")
        return redirect('shop:product_list')

    return render(request, 'product_detail.html', {'product': product})

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢
def _get_cart(user):
    cart, created = Cart.objects.get_or_create(user=user)
    return cart

# ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
def add_to_cart(request):
    if request.method == "POST":
        product_id = request.POST.get('product_id')
        quantity = int(request.POST.get('quantity', 1))
        product = Product.objects.get(id=product_id)

        if request.user.is_authenticated:
            cart = _get_cart(request.user)
            cart_item, created = CartItem.objects.get_or_create(
                cart=cart,
                product=product,
                defaults={'quantity': quantity}
            )
            if not created:
                cart_item.quantity += quantity
                cart_item.save()
            messages.success(request, f"‡πÄ‡∏û‡∏¥‡πà‡∏° {product.name} ‡∏•‡∏á‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß!")
        else:
            messages.error(request, "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤")
            return redirect('shop:login')

    return redirect('shop:product_list')


# ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
@login_required(login_url='shop:login')
def view_cart(request):
    cart = _get_cart(request.user)
    items = cart.items.select_related('product')
    total = sum(it.product.price * it.quantity for it in items)
    return render(request, 'cart.html', {'items': items, 'total': total})


# ‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
def remove_from_cart(request):
    if request.method == 'POST':
        pid = request.POST.get('product_id')
        if request.user.is_authenticated:
            cart = _get_cart(request.user)
            CartItem.objects.filter(cart=cart, product_id=pid).delete()
        else:
            cart = request.session.get('cart', {})
            if pid in cart:
                del cart[pid]
                request.session['cart'] = cart
        messages.info(request, "‡∏ô‡∏≥‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß")
    return redirect('shop:cart')

@login_required(login_url='shop:login')
def my_orders(request):
    """‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ"""
    orders = (
        Order.objects.filter(user=request.user)
        .prefetch_related('items__product')
        .order_by('-created_at')
    )
    return render(request, 'my_orders.html', {'orders': orders})


@login_required(login_url='shop:login')
def my_order_detail(request, order_id):
    """‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£"""
    try:
        order = (
            Order.objects.prefetch_related('items__product')
            .get(id=order_id, user=request.user)
        )
    except Order.DoesNotExist:
        messages.error(request, "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ô‡∏µ‡πâ")
        return redirect('shop:my_orders')

    return render(request, 'my_order_detail.html', {'order': order})

# Checkout
@login_required(login_url='shop:login')
@transaction.atomic
def checkout(request):
    cart = _get_cart(request.user)
    items = cart.items.select_related('product')

    if not items.exists():
        messages.warning(request, "‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤")
        return redirect('shop:cart')

    total = sum(it.product.price * it.quantity for it in items)

    if request.method == 'POST':
        form = GuestCheckoutForm(request.POST)
        if form.is_valid():
            receiver = form.cleaned_data['receiver_name']
            phone = form.cleaned_data['phone']
            address = form.cleaned_data['address_line']
            method = form.cleaned_data['payment_method']

            # ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Order
            order = Order.objects.create(user=request.user, total_price=total)

            # ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
            for it in items:
                OrderItem.objects.create(
                    order=order,
                    product=it.product,
                    quantity=it.quantity,
                    unit_price=it.product.price
                )
                # ‡∏ï‡∏±‡∏î stock
                it.product.stock = max(0, it.product.stock - it.quantity)
                it.product.save()

            # ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Payment
            Payment.objects.create(
                order=order,
                amount=total,
                method=method,
                status='pending'
            )

            # ‚úÖ ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
            items.delete()

            messages.success(request, f"‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß! ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ #{order.id}")
            return redirect('shop:my_orders')
    else:
        form = GuestCheckoutForm()

    return render(request, 'checkout.html', {
        'form': form,
        'cart_items': items,
        'total_price': total
    })


def order_success(request):
    return render(request, 'order_success.html')

@login_required(login_url='shop:login')
@transaction.atomic
def checkout(request):
    if request.method == 'POST':
        form = GuestCheckoutForm(request.POST)
        if form.is_valid():
            receiver = form.cleaned_data['receiver_name']
            phone = form.cleaned_data['phone']
            address = form.cleaned_data['address_line']
            method = form.cleaned_data['payment_method']

            items = []
            total = 0
            cart = _get_cart(request.user)
            for it in cart.items.select_related('product'):
                items.append((it.product, it.quantity))
                total += it.quantity * it.product.price

            order = Order.objects.create(user=request.user, total_price=total)
            for p, q in items:
                OrderItem.objects.create(order=order, product=p, quantity=q, unit_price=p.price)
                p.stock = max(0, p.stock - q)
                p.save()

            Payment.objects.create(order=order, amount=total, method=method, status='pending')
            cart.items.all().delete()

            messages.success(request, "‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß!")
            return redirect('shop:order_success')
    else:
        form = GuestCheckoutForm()
    return render(request, 'checkout.html', {'form': form})